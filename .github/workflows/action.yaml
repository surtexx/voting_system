name: CI/CD workflow for Node.js

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  GOOGLE_CLUSTER: rgheorghe-cicd-cluster
  GOOGLE_PROJECT: gd-gcp-gridu-devops-t1-t2
  GOOGLE_REGION: europe-west1
  GOOGLE_REPOSITORY: rgheorghe-voting-system

jobs:
  install-dependencies:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Install dependencies
        run: npm install
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ./node_modules
          key: ${{ runner.os }}-cache-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-cache-

  test:
    runs-on: ubuntu-latest
    needs:
      - install-dependencies
    steps:
      - uses: actions/checkout@v4
      - name: Cache dependencies
        uses: actions/cache/restore@v4
        with:
          path: ./node_modules
          key: ${{ runner.os }}-cache-${{ hashFiles('**/package-lock.json') }}
      - name: Run tests
        run: npx hardhat test

  publish:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - name: Cache dependencies
        uses: actions/cache/restore@v4
        with:
          path: ./node_modules
          key: ${{ runner.os }}-cache-${{ hashFiles('**/package-lock.json') }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build
        uses: docker/build-push-action@v4
        with:
          context: .
          cache-to: type=local,dest=/tmp/.buildx-cache
      - name: Scan for vulnerabilities
        uses: crazy-max/ghaction-container-scan@v3
        with:
          image: ${{ env.GOOGLE_REGION }}-docker.pkg.dev/${{ env.GOOGLE_PROJECT }}/${{ env.GOOGLE_REPOSITORY }}/${{ github.event.repository.name }}:latest
          dockerfile: Dockerfile
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2.1.3
        with:
          credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.3.0
      - name: Login to GAR
        uses: docker/login-action@v3.2.0
        with:
          registry: ${{ env.GOOGLE_REGION }}-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.GOOGLE_CREDENTIALS }}
      - name: Push to GAR with tag
        if: github.event_name == 'pull_request'
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          cache-from: type=local,src=/tmp/.buildx-cache
          tags: ${{ env.GOOGLE_REGION }}-docker.pkg.dev/${{ env.GOOGLE_PROJECT }}/${{ env.GOOGLE_REPOSITORY }}/${{ github.event.repository.name }}:${{ github.sha }}
      - name: Push to GAR
        if: github.event_name == 'push'
        uses: docker/build-push-action@v4
        with:
          context: .
          cache-from: type=local,src=/tmp/.buildx-cache
          push: true
          tags: ${{ env.GOOGLE_REGION }}-docker.pkg.dev/${{ env.GOOGLE_PROJECT }}/${{ env.GOOGLE_REPOSITORY }}/${{ github.event.repository.name }}:latest

  deploy:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: publish
    steps:
      - uses: actions/checkout@v4
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2.1.3
        with:
          credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      - name: Connect to GKE
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ env.GOOGLE_CLUSTER }}
          location: ${{ env.GOOGLE_REGION }}
      - name: Deploy to GKE
        run: |
          gcloud components install gke-gcloud-auth-plugin
          kubectl delete deployment voting-system
          kubectl delete service voting-system
          kubectl create deployment voting-system --image=${{ env.GOOGLE_REGION }}-docker.pkg.dev/${{ env.GOOGLE_PROJECT }}/${{ env.GOOGLE_REPOSITORY }}/${{ github.event.repository.name }}:latest --replicas=3
          kubectl expose deployment voting-system --type=LoadBalancer --port=80 --target-port=3000
